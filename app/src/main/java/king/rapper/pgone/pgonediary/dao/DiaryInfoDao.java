package king.rapper.pgone.pgonediary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import king.rapper.pgone.pgonediary.entity.DiaryInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIARY_INFO".
*/
public class DiaryInfoDao extends AbstractDao<DiaryInfo, Long> {

    public static final String TABLENAME = "DIARY_INFO";

    /**
     * Properties of entity DiaryInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property DiaryInfoId = new Property(0, Long.class, "diaryInfoId", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(2, Long.class, "time", false, "TIME");
        public final static Property Mood = new Property(3, String.class, "mood", false, "MOOD");
        public final static Property Weather = new Property(4, String.class, "weather", false, "WEATHER");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Background = new Property(6, String.class, "background", false, "BACKGROUND");
        public final static Property Tag = new Property(7, Integer.class, "tag", false, "TAG");
    }

    private DaoSession daoSession;


    public DiaryInfoDao(DaoConfig config) {
        super(config);
    }
    
    public DiaryInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIARY_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: diaryInfoId
                "\"TITLE\" TEXT," + // 1: title
                "\"TIME\" INTEGER," + // 2: time
                "\"MOOD\" TEXT," + // 3: mood
                "\"WEATHER\" TEXT," + // 4: weather
                "\"CONTENT\" TEXT," + // 5: content
                "\"BACKGROUND\" TEXT," + // 6: background
                "\"TAG\" INTEGER);"); // 7: tag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIARY_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DiaryInfo entity) {
        stmt.clearBindings();
 
        Long diaryInfoId = entity.getDiaryInfoId();
        if (diaryInfoId != null) {
            stmt.bindLong(1, diaryInfoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(4, mood);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(7, background);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(8, tag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DiaryInfo entity) {
        stmt.clearBindings();
 
        Long diaryInfoId = entity.getDiaryInfoId();
        if (diaryInfoId != null) {
            stmt.bindLong(1, diaryInfoId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time);
        }
 
        String mood = entity.getMood();
        if (mood != null) {
            stmt.bindString(4, mood);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(5, weather);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(6, content);
        }
 
        String background = entity.getBackground();
        if (background != null) {
            stmt.bindString(7, background);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(8, tag);
        }
    }

    @Override
    protected final void attachEntity(DiaryInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DiaryInfo readEntity(Cursor cursor, int offset) {
        DiaryInfo entity = new DiaryInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // diaryInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mood
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // weather
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // background
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // tag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DiaryInfo entity, int offset) {
        entity.setDiaryInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setMood(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWeather(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBackground(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTag(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DiaryInfo entity, long rowId) {
        entity.setDiaryInfoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DiaryInfo entity) {
        if(entity != null) {
            return entity.getDiaryInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DiaryInfo entity) {
        return entity.getDiaryInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
