package king.rapper.pgone.pgonediary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import king.rapper.pgone.pgonediary.entity.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Long> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageInfoId = new Property(0, Long.class, "MessageInfoId", true, "_id");
        public final static Property ExtraMsgId = new Property(1, String.class, "extraMsgId", false, "EXTRA_MSG_ID");
        public final static Property ExtraTitle = new Property(2, String.class, "extraTitle", false, "EXTRA_TITLE");
        public final static Property ExtraMessage = new Property(3, String.class, "extraMessage", false, "EXTRA_MESSAGE");
        public final static Property ExtraNotificationId = new Property(4, String.class, "extraNotificationId", false, "EXTRA_NOTIFICATION_ID");
        public final static Property ExtraNotificationTile = new Property(5, String.class, "extraNotificationTile", false, "EXTRA_NOTIFICATION_TILE");
        public final static Property ExtraAlter = new Property(6, String.class, "extraAlter", false, "EXTRA_ALTER");
        public final static Property ExtraExtra = new Property(7, String.class, "extraExtra", false, "EXTRA_EXTRA");
        public final static Property ExtraBigText = new Property(8, String.class, "extraBigText", false, "EXTRA_BIG_TEXT");
        public final static Property ExtraRrichpushHtmlPath = new Property(9, String.class, "extraRrichpushHtmlPath", false, "EXTRA_RRICHPUSH_HTML_PATH");
        public final static Property ExtraRrichpushHtmlRes = new Property(10, String.class, "extraRrichpushHtmlRes", false, "EXTRA_RRICHPUSH_HTML_RES");
        public final static Property ExtraBigPicPath = new Property(11, String.class, "extraBigPicPath", false, "EXTRA_BIG_PIC_PATH");
        public final static Property ExtraInbox = new Property(12, String.class, "extraInbox", false, "EXTRA_INBOX");
        public final static Property ExtraNotiPriority = new Property(13, String.class, "extraNotiPriority", false, "EXTRA_NOTI_PRIORITY");
        public final static Property Tag = new Property(14, Integer.class, "tag", false, "TAG");
        public final static Property Time = new Property(15, Long.class, "time", false, "TIME");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: MessageInfoId
                "\"EXTRA_MSG_ID\" TEXT," + // 1: extraMsgId
                "\"EXTRA_TITLE\" TEXT," + // 2: extraTitle
                "\"EXTRA_MESSAGE\" TEXT," + // 3: extraMessage
                "\"EXTRA_NOTIFICATION_ID\" TEXT," + // 4: extraNotificationId
                "\"EXTRA_NOTIFICATION_TILE\" TEXT," + // 5: extraNotificationTile
                "\"EXTRA_ALTER\" TEXT," + // 6: extraAlter
                "\"EXTRA_EXTRA\" TEXT," + // 7: extraExtra
                "\"EXTRA_BIG_TEXT\" TEXT," + // 8: extraBigText
                "\"EXTRA_RRICHPUSH_HTML_PATH\" TEXT," + // 9: extraRrichpushHtmlPath
                "\"EXTRA_RRICHPUSH_HTML_RES\" TEXT," + // 10: extraRrichpushHtmlRes
                "\"EXTRA_BIG_PIC_PATH\" TEXT," + // 11: extraBigPicPath
                "\"EXTRA_INBOX\" TEXT," + // 12: extraInbox
                "\"EXTRA_NOTI_PRIORITY\" TEXT," + // 13: extraNotiPriority
                "\"TAG\" INTEGER," + // 14: tag
                "\"TIME\" INTEGER);"); // 15: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        Long MessageInfoId = entity.getMessageInfoId();
        if (MessageInfoId != null) {
            stmt.bindLong(1, MessageInfoId);
        }
 
        String extraMsgId = entity.getExtraMsgId();
        if (extraMsgId != null) {
            stmt.bindString(2, extraMsgId);
        }
 
        String extraTitle = entity.getExtraTitle();
        if (extraTitle != null) {
            stmt.bindString(3, extraTitle);
        }
 
        String extraMessage = entity.getExtraMessage();
        if (extraMessage != null) {
            stmt.bindString(4, extraMessage);
        }
 
        String extraNotificationId = entity.getExtraNotificationId();
        if (extraNotificationId != null) {
            stmt.bindString(5, extraNotificationId);
        }
 
        String extraNotificationTile = entity.getExtraNotificationTile();
        if (extraNotificationTile != null) {
            stmt.bindString(6, extraNotificationTile);
        }
 
        String extraAlter = entity.getExtraAlter();
        if (extraAlter != null) {
            stmt.bindString(7, extraAlter);
        }
 
        String extraExtra = entity.getExtraExtra();
        if (extraExtra != null) {
            stmt.bindString(8, extraExtra);
        }
 
        String extraBigText = entity.getExtraBigText();
        if (extraBigText != null) {
            stmt.bindString(9, extraBigText);
        }
 
        String extraRrichpushHtmlPath = entity.getExtraRrichpushHtmlPath();
        if (extraRrichpushHtmlPath != null) {
            stmt.bindString(10, extraRrichpushHtmlPath);
        }
 
        String extraRrichpushHtmlRes = entity.getExtraRrichpushHtmlRes();
        if (extraRrichpushHtmlRes != null) {
            stmt.bindString(11, extraRrichpushHtmlRes);
        }
 
        String extraBigPicPath = entity.getExtraBigPicPath();
        if (extraBigPicPath != null) {
            stmt.bindString(12, extraBigPicPath);
        }
 
        String extraInbox = entity.getExtraInbox();
        if (extraInbox != null) {
            stmt.bindString(13, extraInbox);
        }
 
        String extraNotiPriority = entity.getExtraNotiPriority();
        if (extraNotiPriority != null) {
            stmt.bindString(14, extraNotiPriority);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(15, tag);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(16, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        Long MessageInfoId = entity.getMessageInfoId();
        if (MessageInfoId != null) {
            stmt.bindLong(1, MessageInfoId);
        }
 
        String extraMsgId = entity.getExtraMsgId();
        if (extraMsgId != null) {
            stmt.bindString(2, extraMsgId);
        }
 
        String extraTitle = entity.getExtraTitle();
        if (extraTitle != null) {
            stmt.bindString(3, extraTitle);
        }
 
        String extraMessage = entity.getExtraMessage();
        if (extraMessage != null) {
            stmt.bindString(4, extraMessage);
        }
 
        String extraNotificationId = entity.getExtraNotificationId();
        if (extraNotificationId != null) {
            stmt.bindString(5, extraNotificationId);
        }
 
        String extraNotificationTile = entity.getExtraNotificationTile();
        if (extraNotificationTile != null) {
            stmt.bindString(6, extraNotificationTile);
        }
 
        String extraAlter = entity.getExtraAlter();
        if (extraAlter != null) {
            stmt.bindString(7, extraAlter);
        }
 
        String extraExtra = entity.getExtraExtra();
        if (extraExtra != null) {
            stmt.bindString(8, extraExtra);
        }
 
        String extraBigText = entity.getExtraBigText();
        if (extraBigText != null) {
            stmt.bindString(9, extraBigText);
        }
 
        String extraRrichpushHtmlPath = entity.getExtraRrichpushHtmlPath();
        if (extraRrichpushHtmlPath != null) {
            stmt.bindString(10, extraRrichpushHtmlPath);
        }
 
        String extraRrichpushHtmlRes = entity.getExtraRrichpushHtmlRes();
        if (extraRrichpushHtmlRes != null) {
            stmt.bindString(11, extraRrichpushHtmlRes);
        }
 
        String extraBigPicPath = entity.getExtraBigPicPath();
        if (extraBigPicPath != null) {
            stmt.bindString(12, extraBigPicPath);
        }
 
        String extraInbox = entity.getExtraInbox();
        if (extraInbox != null) {
            stmt.bindString(13, extraInbox);
        }
 
        String extraNotiPriority = entity.getExtraNotiPriority();
        if (extraNotiPriority != null) {
            stmt.bindString(14, extraNotiPriority);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(15, tag);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(16, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // MessageInfoId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // extraMsgId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // extraTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // extraMessage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // extraNotificationId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // extraNotificationTile
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // extraAlter
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // extraExtra
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // extraBigText
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // extraRrichpushHtmlPath
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // extraRrichpushHtmlRes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // extraBigPicPath
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // extraInbox
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // extraNotiPriority
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // tag
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setMessageInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExtraMsgId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setExtraTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setExtraMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setExtraNotificationId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setExtraNotificationTile(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setExtraAlter(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExtraExtra(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setExtraBigText(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setExtraRrichpushHtmlPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setExtraRrichpushHtmlRes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setExtraBigPicPath(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExtraInbox(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setExtraNotiPriority(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTag(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTime(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageInfo entity, long rowId) {
        entity.setMessageInfoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageInfo entity) {
        if(entity != null) {
            return entity.getMessageInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        return entity.getMessageInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
