package king.rapper.pgone.pgonediary.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import king.rapper.pgone.pgonediary.entity.Recording;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECORDING".
*/
public class RecordingDao extends AbstractDao<Recording, Long> {

    public static final String TABLENAME = "RECORDING";

    /**
     * Properties of entity Recording.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property RecordingId = new Property(0, Long.class, "recordingId", true, "_id");
        public final static Property DiaryJoinRecordingId = new Property(1, Long.class, "diaryJoinRecordingId", false, "DIARY_JOIN_RECORDING_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property FilePath = new Property(3, String.class, "filePath", false, "FILE_PATH");
        public final static Property Length = new Property(4, Long.class, "length", false, "LENGTH");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
    }

    private Query<Recording> diaryInfo_RecordingListQuery;

    public RecordingDao(DaoConfig config) {
        super(config);
    }
    
    public RecordingDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECORDING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: recordingId
                "\"DIARY_JOIN_RECORDING_ID\" INTEGER," + // 1: diaryJoinRecordingId
                "\"NAME\" TEXT," + // 2: name
                "\"FILE_PATH\" TEXT," + // 3: filePath
                "\"LENGTH\" INTEGER," + // 4: length
                "\"TIME\" INTEGER);"); // 5: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECORDING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Recording entity) {
        stmt.clearBindings();
 
        Long recordingId = entity.getRecordingId();
        if (recordingId != null) {
            stmt.bindLong(1, recordingId);
        }
 
        Long diaryJoinRecordingId = entity.getDiaryJoinRecordingId();
        if (diaryJoinRecordingId != null) {
            stmt.bindLong(2, diaryJoinRecordingId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
 
        Long length = entity.getLength();
        if (length != null) {
            stmt.bindLong(5, length);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Recording entity) {
        stmt.clearBindings();
 
        Long recordingId = entity.getRecordingId();
        if (recordingId != null) {
            stmt.bindLong(1, recordingId);
        }
 
        Long diaryJoinRecordingId = entity.getDiaryJoinRecordingId();
        if (diaryJoinRecordingId != null) {
            stmt.bindLong(2, diaryJoinRecordingId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(4, filePath);
        }
 
        Long length = entity.getLength();
        if (length != null) {
            stmt.bindLong(5, length);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Recording readEntity(Cursor cursor, int offset) {
        Recording entity = new Recording( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // recordingId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // diaryJoinRecordingId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // filePath
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // length
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Recording entity, int offset) {
        entity.setRecordingId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiaryJoinRecordingId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLength(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Recording entity, long rowId) {
        entity.setRecordingId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Recording entity) {
        if(entity != null) {
            return entity.getRecordingId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Recording entity) {
        return entity.getRecordingId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "recordingList" to-many relationship of DiaryInfo. */
    public List<Recording> _queryDiaryInfo_RecordingList(Long diaryJoinRecordingId) {
        synchronized (this) {
            if (diaryInfo_RecordingListQuery == null) {
                QueryBuilder<Recording> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DiaryJoinRecordingId.eq(null));
                diaryInfo_RecordingListQuery = queryBuilder.build();
            }
        }
        Query<Recording> query = diaryInfo_RecordingListQuery.forCurrentThread();
        query.setParameter(0, diaryJoinRecordingId);
        return query.list();
    }

}
