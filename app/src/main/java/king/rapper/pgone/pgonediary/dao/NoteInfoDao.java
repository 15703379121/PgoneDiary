package king.rapper.pgone.pgonediary.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import king.rapper.pgone.pgonediary.entity.NoteInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NOTE_INFO".
*/
public class NoteInfoDao extends AbstractDao<NoteInfo, Long> {

    public static final String TABLENAME = "NOTE_INFO";

    /**
     * Properties of entity NoteInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteInfoId = new Property(0, Long.class, "NoteInfoId", true, "_id");
        public final static Property Time = new Property(1, Long.class, "time", false, "TIME");
        public final static Property Content = new Property(2, String.class, "content", false, "CONTENT");
        public final static Property Tag = new Property(3, Integer.class, "tag", false, "TAG");
        public final static Property IsSelect = new Property(4, Boolean.class, "isSelect", false, "IS_SELECT");
    }

    private DaoSession daoSession;


    public NoteInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NoteInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NOTE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: NoteInfoId
                "\"TIME\" INTEGER," + // 1: time
                "\"CONTENT\" TEXT," + // 2: content
                "\"TAG\" INTEGER," + // 3: tag
                "\"IS_SELECT\" INTEGER);"); // 4: isSelect
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NOTE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NoteInfo entity) {
        stmt.clearBindings();
 
        Long NoteInfoId = entity.getNoteInfoId();
        if (NoteInfoId != null) {
            stmt.bindLong(1, NoteInfoId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(4, tag);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(5, isSelect ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NoteInfo entity) {
        stmt.clearBindings();
 
        Long NoteInfoId = entity.getNoteInfoId();
        if (NoteInfoId != null) {
            stmt.bindLong(1, NoteInfoId);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(3, content);
        }
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(4, tag);
        }
 
        Boolean isSelect = entity.getIsSelect();
        if (isSelect != null) {
            stmt.bindLong(5, isSelect ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(NoteInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NoteInfo readEntity(Cursor cursor, int offset) {
        NoteInfo entity = new NoteInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // NoteInfoId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // time
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // content
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // tag
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // isSelect
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NoteInfo entity, int offset) {
        entity.setNoteInfoId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTag(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsSelect(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NoteInfo entity, long rowId) {
        entity.setNoteInfoId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NoteInfo entity) {
        if(entity != null) {
            return entity.getNoteInfoId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NoteInfo entity) {
        return entity.getNoteInfoId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
